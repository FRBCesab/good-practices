# {{< fa folder >}} &nbsp;Project organization

## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::

. . .

<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. **Human readable**
:::
::: {.column width="50%"}
- Name contains information on the content
- Respect concept of [slug](https://en.wikipedia.org/wiki/Clean_URL#Slug) from semantic URLs
:::
::::

[^anna]: <https://annakrystalli.me/rrresearchACCE20/slides/03_filenaming.html>


## First things first



> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. **Machine readable**
:::
::: {.column width="50%"}
- Regular expression and globbing friendly
  - avoid space and accented characters
  - good use of punctuation and case
:::
::::



## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. **Machine readable**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names ----
files <- c("2020-survey_A.csv", "2021-survey_A.csv", "2021-survey_B.csv")

# Extract years ----
strsplit(files, "-") |>              # Split string by '-'
  lapply(function(x) x[1]) |>        # Get the first element
  unlist() |>                        # Convert to vector
  as.numeric()                       # Convert to numeric
```
:::
::::


## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. **Machine readable**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names ----
files <- c("2020-survey_A.csv", "2021-survey_A.csv", "2021-survey_B.csv")

# Extract years ----
strsplit(files, "-") |>              # Split string by '-'
  lapply(function(x) x[1]) |>        # Get the first element
  unlist() |>                        # Convert to vector
  as.numeric()                       # Convert to numeric
```

<br/>

```{r}
#| echo: true
# Extract surveys ----
strsplit(files, "-") |>              # Split string by '-'
  lapply(function(x) x[2]) |>        # Get the second element
  unlist() |>                        # Convert to vector
  gsub("survey_|\\.csv", "", x = _)  # Clean output
```
:::
::::



## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. Machine readable
1. **Play well with default ordering**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names ----
files <- c("1-survey_A.csv", "2-survey_B.csv", "10-survey_C.csv")

# Sort file names ----
sort(files)
```
:::
::::


## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. Machine readable
1. **Play well with default ordering**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names ----
files <- c("1-survey_A.csv", "2-survey_B.csv", "10-survey_C.csv")

# Sort file names ----
sort(files)
```

<br/>

```{r}
#| echo: true
# File names ----
files <- c("01-survey_A.csv", "02-survey_B.csv", "10-survey_C.csv")

# Sort file names ----
sort(files)
```
:::
::::



## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. Machine readable
1. **Play well with default ordering**
:::
::: {.column width="50%"}
![_Source:_ [xkcd](https://xkcd.com/1179/)](https://imgs.xkcd.com/comics/iso_8601.png){width="50%"}
:::
::::


## Naming variables


{{< fa hand-point-right >}} &nbsp;Be consistent and follow the guidelines of your community


![<https://allisonhorst.com/other-r-fun>](img/cases.png){width="50%"}


## Research compendium

> The goal of a research compendium is to provide a ***standard*** and easily 
recognisable way for ***organizing the digital materials*** of a project to enable 
others to ***inspect***, ***reproduce***, and ***extend the research***.

::: {.citation}
Marwick B, Boettiger C & Mullen L (2018)[^marwick] 
:::

. . .

<br><br>

::: {.center}
**Three  generic  principles**
:::

:::: { .columns }
::: { .column .center width="33%"}
1.<br>
Files organized according to the **conventions** of the community
:::
::: { .column .center width="33%"}
2.<br>
Clear **separation** of data, method, and output
:::
::: { .column .center width="33%"}
3.<br>
Specify the **computational environment** that was used
:::
::::


[^marwick]: <https://doi.org/10.7287/peerj.preprints.3192v2>


## Research compendium

{{< fa hand-point-right >}} &nbsp;Strong flexibility in the structure of a compendium

<br>

:::: { .columns }
::: { .column width="33%"}
**Small compendium**

```
ðŸ–¿ projectname
â”œâ”€â”€ ðŸ–¿ .git
â”œâ”€â”€ ðŸ–¿ data ðŸ”’
â”œâ”€â”€ ðŸ–¿ code
â”‚   â””â”€â”€ ðŸ–¹ script.R
â”œâ”€â”€ ðŸ–¿ outputs
â”œâ”€â”€ ðŸ–¹ projectname.Rproj
â”œâ”€â”€ ðŸ–¹ .gitignore
â””â”€â”€ ðŸ–¹ README.md
```
:::

::: { .column width="33%"}
**Medium compendium**

```
ðŸ–¿ projectname
â”œâ”€â”€ ðŸ–¿ .git
â”œâ”€â”€ ðŸ–¿ data
â”‚   â”œâ”€â”€ ðŸ–¿ raw-data ðŸ”’
â”‚   â””â”€â”€ ðŸ–¿ derived-data
â”œâ”€â”€ ðŸ–¿ R
â”‚   â”œâ”€â”€ ðŸ–¹ function-x.R
â”‚   â””â”€â”€ ðŸ–¹ function-y.R
â”œâ”€â”€ ðŸ–¿ analyses
â”‚   â”œâ”€â”€ ðŸ–¹ script-1.R
â”‚   â””â”€â”€ ðŸ–¹ script-n.R
â”œâ”€â”€ ðŸ–¿ outputs
â”œâ”€â”€ ðŸ–¹ projectname.Rproj
â”œâ”€â”€ ðŸ–¹ .gitignore
â”œâ”€â”€ ðŸ–¹ DESCRIPTION
â”œâ”€â”€ ðŸ–¹ LICENSE
â”œâ”€â”€ ðŸ–¹ make.R
â””â”€â”€ ðŸ–¹ README.md
```
:::

::: { .column width="33%"}
**Large compendium**

```
ðŸ–¿ projectname
â”œâ”€â”€ ðŸ–¿ .git
â”œâ”€â”€ ðŸ–¿ .github
â”‚   â””â”€â”€ ðŸ–¿ workflows
â”‚       â”œâ”€â”€ ðŸ–¹ workflow-1.yaml
â”‚       â””â”€â”€ ðŸ–¹ workflow-n.yaml
â”œâ”€â”€ ðŸ–¿ .renv
â”œâ”€â”€ ðŸ–¿ data
â”‚   â”œâ”€â”€ ðŸ–¿ raw-data ðŸ”’
â”‚   â””â”€â”€ ðŸ–¿ derived-data
â”œâ”€â”€ ðŸ–¿ R
â”‚   â”œâ”€â”€ ðŸ–¹ function-x.R
â”‚   â””â”€â”€ ðŸ–¹ function-y.R
â”œâ”€â”€ ðŸ–¿ analyses
â”‚   â”œâ”€â”€ ðŸ–¹ script-x.R
â”‚   â””â”€â”€ ðŸ–¹ script-n.R
â”œâ”€â”€ ðŸ–¿ outputs
â”œâ”€â”€ ðŸ–¿ paper
â”‚   â”œâ”€â”€ ðŸ–¹ references.bib
â”‚   â”œâ”€â”€ ðŸ–¹ style.csl
â”‚   â””â”€â”€ ðŸ–¹ paper.Rmd
â”œâ”€â”€ ðŸ–¹ projectname.Rproj
â”œâ”€â”€ ðŸ–¹ .gitignore
â”œâ”€â”€ ðŸ–¹ DESCRIPTION
â”œâ”€â”€ ðŸ–¹ LICENSE
â”œâ”€â”€ ðŸ–¹ CITATION.cff
â”œâ”€â”€ ðŸ–¹ make.R
â”œâ”€â”€ ðŸ–¹ dockerfile
â”œâ”€â”€ ðŸ–¹ renv.lock
â””â”€â”€ ðŸ–¹ README.md
```
:::
::::


## RStudio Project

Use the power of RStudio Project

```
File > New Project...
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-project.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
![](img/rstudio-newproject.png){width="80%" fig-align="left"}
:::
::::

. . .

RStudio IDE will create a `.Rproj` (simple text file) file at the root of the folder

- Double-click on a `.Rproj` file to open a fresh instance of RStudio, w/ the working directory pointed at the folder root
- This will help you to create self-contained workspace (= _compendium_)

{{< fa hand-point-right >}} &nbsp;In a few slides, we will talk about `setwd()`


## In the meantime

RStudio IDE - Minimal configuration for a better reproducibility

```
Tools > Global options > General
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-ideconfig.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
- **Never** save your workspace as `.RData`<br>
{{< fa hand-point-right >}} &nbsp;Decide what you want to save and use<br>
`save()`, `saveRDS()`, `write.csv()`, etc.
:::
::::


## In the meantime

RStudio IDE - Minimal configuration for a better reproducibility

```
Tools > Global options > General
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-ideconfig.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
- **Never** save your workspace as `.RData`<br>
{{< fa hand-point-right >}} &nbsp;Decide what you want to save and use<br>
`save()`, `saveRDS()`, `write.csv()`, etc.

<br>

- **Never** save your command history<br>
{{< fa hand-point-right >}} &nbsp;Write your code in scripts not in the console
:::
::::


## In the meantime

RStudio IDE - Minimal configuration for a better reproducibility

```
Tools > Global options > General
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-ideconfig.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
- **Never** save your workspace as `.RData`<br>
{{< fa hand-point-right >}} &nbsp;Decide what you want to save and use<br>
`save()`, `saveRDS()`, `write.csv()`, etc.

<br>

- **Never** save your command history<br>
{{< fa hand-point-right >}} &nbsp;Write your code in scripts not in the console

<br>

Follow these two recommendations and use RStudio Project, and you'll[^wtf]:

- never use again `rm(list = ls())`
- never use again `setwd()`
:::
::::


[^wtf]: <https://rstats.wtf/projects.html>


## Whatâ€™s wrong with `rm(list = ls())`?[^rmlist]


. . .

Does NOT create a fresh {{< fa brands r-project >}} session

{{< fa hand-point-right >}} &nbsp;It just deletes user-created objects from the global workspace

. . .

<br>

Other changes may have been made to the {{< fa brands r-project >}} session, like: `options()`, `library()`, etc.

{{< fa hand-point-right >}} &nbsp;You may get a wrong impression of reproducibility

. . .

<br>

The solution?

{{< fa hand-point-right >}} &nbsp;Write every script assuming it will be run in a fresh {{< fa brands r-project >}} session

[^rmlist]: <https://www.tidyverse.org/blog/2017/12/workflow-vs-script/#whats-wrong-with-rmlist-ls>


## Whatâ€™s wrong with `setwd()`?[^setwd]

. . .

:::: { .columns }
::: { .column width="50%"}
Usually used to create absolute paths

```{r}
#| echo: true
#| eval: false
# Absolute path on Windows
setwd("C:\\Users\\janedoe\\Documents\\projectname")

# Absolute path on MacOS
setwd("/Users/johndoe/Dropbox/work/projectname")

# Absolute path on GNU/Linux
setwd("/home/johnsmith/git-projects/projectname")
```

{{< fa hand-point-right >}} &nbsp;Not portable and not reproducible (for others)
:::
::: { .column width="50%"}
:::
::::

<br>


> The chance of the `setwd()` command having the desired effect â€“ making the 
file paths work â€“ for anyone besides its author is 0%. Itâ€™s also unlikely to 
work for the author one or two years or computers from now. The project is not 
self-contained and portable.

::: {.citation}
[Jenny Bryan](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)
:::


[^setwd]: <https://www.tidyverse.org/blog/2017/12/workflow-vs-script/#whats-wrong-with-setwd>



## Building relative paths

...


