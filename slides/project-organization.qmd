# {{< fa folder >}} &nbsp;Project organization

## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::

. . .

<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. **Human readable**
:::
::: {.column width="50%"}
- Name contains information on the content
- Respect concept of [slug](https://en.wikipedia.org/wiki/Clean_URL#Slug) from semantic URLs
:::
::::

[^anna]: <https://annakrystalli.me/rrresearchACCE20/slides/03_filenaming.html>


## First things first



> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. **Machine readable**
:::
::: {.column width="50%"}
- Regular expression and globbing friendly
  - avoid space and accented characters
  - good use of punctuation and case
:::
::::



## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. **Machine readable**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names ----
files <- c("2020-survey_A.csv", "2021-survey_A.csv", "2021-survey_B.csv")

# Extract years ----
strsplit(files, "-") |>              # Split string by '-'
  lapply(function(x) x[1]) |>        # Get the first element
  unlist() |>                        # Convert to vector
  as.numeric()                       # Convert to numeric
```
:::
::::


## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. **Machine readable**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names ----
files <- c("2020-survey_A.csv", "2021-survey_A.csv", "2021-survey_B.csv")

# Extract years ----
strsplit(files, "-") |>              # Split string by '-'
  lapply(function(x) x[1]) |>        # Get the first element
  unlist() |>                        # Convert to vector
  as.numeric()                       # Convert to numeric
```

<br/>

```{r}
#| echo: true
# Extract surveys ----
strsplit(files, "-") |>              # Split string by '-'
  lapply(function(x) x[2]) |>        # Get the second element
  unlist() |>                        # Convert to vector
  gsub("survey_|\\.csv", "", x = _)  # Clean output
```
:::
::::



## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. Machine readable
1. **Play well with default ordering**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names (bad) ----
files <- c("1-survey_A.csv", "2-survey_B.csv", "10-survey_C.csv")

# Sort file names ----
sort(files)
```
:::
::::


## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. Machine readable
1. **Play well with default ordering**
:::
::: {.column width="50%"}
```{r}
#| echo: true
# File names (bad) ----
files <- c("1-survey_A.csv", "2-survey_B.csv", "10-survey_C.csv")

# Sort file names ----
sort(files)
```

<br/>

```{r}
#| echo: true
# File names (better) ----
files <- c("01-survey_A.csv", "02-survey_B.csv", "10-survey_C.csv")

# Sort file names ----
sort(files)
```
:::
::::



## First things first


> Â« There are only two hard things in Computer Science: cache invalidation and **naming things**. Â»

::: {.citation}
Phil Karlton
:::


<br/>


**Three principles for naming files**[^anna]

:::: { .columns }
::: {.column width="50%"}
1. Human readable
1. Machine readable
1. **Play well with default ordering**
:::
::: {.column width="50%"}
![Source: [xkcd](https://xkcd.com/1179/)](https://imgs.xkcd.com/comics/iso_8601.png){width="50%"}
:::
::::


## Naming variables


{{< fa hand-point-right >}} &nbsp;Be consistent and follow the guidelines of your community


![Source: <https://allisonhorst.com/other-r-fun>](img/cases.png){width="50%"}


## Research compendium

> The goal of a research compendium is to provide a ***standard*** and easily 
recognisable way for ***organizing the digital materials*** of a project to enable 
others to ***inspect***, ***reproduce***, and ***extend the research***.

::: {.citation}
Marwick B, Boettiger C & Mullen L (2018)[^marwick] 
:::

. . .

<br><br>

::: {.center}
**Three  generic  principles**
:::

:::: { .columns }
::: { .column .center width="33%"}
1.<br>
Files organized according to the **conventions** of the community
:::
::: { .column .center width="33%"}
2.<br>
Clear **separation** of data, method, and output
:::
::: { .column .center width="33%"}
3.<br>
Specify the **computational environment** that was used
:::
::::

. . .

<br>

{{< fa hand-point-right >}} &nbsp;A research compendium must be **self-contained**

[^marwick]: <https://doi.org/10.7287/peerj.preprints.3192v2>


## Research compendium

{{< fa hand-point-right >}} &nbsp;Strong flexibility in the structure of a compendium

<br>

:::: { .columns }
::: { .column width="33%"}
**Small compendium**

```
project/
â”œâ”€ .git/
â”œâ”€ data/ ðŸ”’
â”œâ”€ code/
â”‚  â””â”€ script.R
â”œâ”€ outputs/
â”œâ”€ project.Rproj
â”œâ”€ .gitignore
â””â”€ README.md
```
:::

::: { .column width="33%"}
**Medium compendium**

```
project/
â”œâ”€ .git/
â”œâ”€ data/
â”‚  â”œâ”€ raw-data/ ðŸ”’
â”‚  â””â”€ derived-data/
â”œâ”€ R/
â”‚  â”œâ”€ function-x.R
â”‚  â””â”€ function-y.R
â”œâ”€ analyses/
â”‚  â”œâ”€ script-1.R
â”‚  â””â”€ script-n.R
â”œâ”€ outputs/
â”œâ”€ project.Rproj
â”œâ”€ .gitignore
â”œâ”€ DESCRIPTION
â”œâ”€ LICENSE
â”œâ”€ make.R
â””â”€ README.md
```
:::

::: { .column width="33%"}
**Large compendium**

```
project/
â”œâ”€ .git/
â”œâ”€ .github/
â”‚  â””â”€ workflows/
â”‚     â”œâ”€ workflow-1.yaml
â”‚     â””â”€ workflow-n.yaml
â”œâ”€ .renv/
â”œâ”€ data/
â”‚  â”œâ”€ raw-data/ ðŸ”’
â”‚  â””â”€ derived-data/
â”œâ”€ R/
â”‚  â”œâ”€ function-x.R
â”‚  â””â”€ function-y.R
â”œâ”€ analyses/
â”‚  â”œâ”€ script-x.R
â”‚  â””â”€ script-n.R
â”œâ”€ outputs/
â”œâ”€ paper/
â”‚  â”œâ”€ references.bib
â”‚  â”œâ”€ style.csl
â”‚  â””â”€ paper.Rmd
â”œâ”€ project.Rproj
â”œâ”€ .gitignore
â”œâ”€ DESCRIPTION
â”œâ”€ LICENSE
â”œâ”€ CITATION.cff
â”œâ”€ make.R
â”œâ”€ dockerfile
â”œâ”€ renv.lock
â””â”€ README.md
```
:::
::::


## RStudio Project

Use the power of RStudio Project

```
File > New Project...
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-project.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
![](img/rstudio-newproject.png){width="80%" fig-align="left"}
:::
::::

. . .

RStudio IDE will create a `.Rproj` (simple text file) file at the root of the folder

- Double-click on a `.Rproj` file to open a fresh instance of RStudio, w/ the working directory pointing at the folder root
- This will help you to create self-contained workspace (= _compendium_)

{{< fa hand-point-right >}} &nbsp;In a few slides, we will talk about `setwd()`


## In the meantime

RStudio IDE - Minimal configuration for a better reproducibility

```
Tools > Global options > General
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-ideconfig.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
- **Never** save your workspace as `.RData`<br>
{{< fa hand-point-right >}} &nbsp;Decide what you want to save and use<br>
`save()`, `saveRDS()`, `write.csv()`, etc.
:::
::::


## In the meantime

RStudio IDE - Minimal configuration for a better reproducibility

```
Tools > Global Options > General
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-ideconfig.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
- **Never** save your workspace as `.RData`<br>
{{< fa hand-point-right >}} &nbsp;Decide what you want to save and use<br>
`save()`, `saveRDS()`, `write.csv()`, etc.

<br>

- **Never** save your command history<br>
{{< fa hand-point-right >}} &nbsp;Write your code in scripts not in the console
:::
::::


## In the meantime

RStudio IDE - Minimal configuration for a better reproducibility

```
Tools > Global Options > General
```

:::: { .columns }
::: { .column width="50%"}
![](img/rstudio-ideconfig.png){width="80%" fig-align="left"}
:::

::: { .column width="50%"}
- **Never** save your workspace as `.RData`<br>
{{< fa hand-point-right >}} &nbsp;Decide what you want to save and use<br>
`save()`, `saveRDS()`, `write.csv()`, etc.

<br>

- **Never** save your command history<br>
{{< fa hand-point-right >}} &nbsp;Write your code in scripts not in the console

<br>

Follow these two recommendations and use RStudio Project, and you'll[^wtf]:

- never use again `rm(list = ls())`
- never use again `setwd()`
:::
::::


[^wtf]: <https://rstats.wtf/projects.html>


## Whatâ€™s wrong with `rm(list = ls())`?[^rmlist]


. . .

Does NOT create a fresh {{< fa brands r-project >}} session

{{< fa hand-point-right >}} &nbsp;It just deletes user-created objects from the global workspace

. . .

<br>

Other changes may have been made to the {{< fa brands r-project >}} session, like `options()`, `library()`, etc.

{{< fa hand-point-right >}} &nbsp;You may get a wrong impression of reproducibility

. . .

<br>

The solution?

{{< fa hand-point-right >}} &nbsp;Write every script assuming it will be run in a fresh {{< fa brands r-project >}} session

[^rmlist]: <https://www.tidyverse.org/blog/2017/12/workflow-vs-script/#whats-wrong-with-rmlist-ls>


## Whatâ€™s wrong with `setwd()`?[^setwd]

. . .

:::: { .columns }
::: { .column width="50%"}
Usually used to create absolute paths

```{r}
#| echo: true
#| eval: false
# Absolute path on Windows
setwd("C:\\Users\\janedoe\\Documents\\projectname")

# Absolute path on MacOS
setwd("/Users/johndoe/Dropbox/work/projectname")

# Absolute path on GNU/Linux
setwd("/home/johnsmith/git-projects/projectname")
```

{{< fa hand-point-right >}} &nbsp;Not portable and not reproducible
:::
::: { .column width="50%"}
:::
::::

<br>


> The chance of the `setwd()` command having the desired effect â€“ making the 
file paths work â€“ for anyone besides its author is 0%. Itâ€™s also unlikely to 
work for the author one or two years or computers from now. The project is not 
self-contained and portable.

::: {.citation}
Jenny Bryan (2017)[^bryan]
:::

[^bryan]: <https://www.tidyverse.org/blog/2017/12/workflow-vs-script/>
[^setwd]: <https://www.tidyverse.org/blog/2017/12/workflow-vs-script/#whats-wrong-with-setwd>



## Building robust paths

::::{ .columns }
:::{.column width="40%"}
![Source: <https://allisonhorst.com/other-r-fun>](img/here.png)
:::

:::{.column width="60%"}

<br>

```{r}
#| echo: true
#| eval: false
# Output of here::here() on Windows
here::here()
## [1] "C:/Users/janedoe/Documents/project"

# Output of here::here() on MacOS
here::here()
## [1] "/Users/johndoe/Dropbox/work/project"

# Output of here::here() on GNU/Linux
here::here()
## [1] "/home/johnsmith/git-projects/project"
```
:::
::::



## Building robust paths

::::{ .columns }
:::{.column width="40%"}
![<https://allisonhorst.com/other-r-fun>](img/here.png)
:::

:::{.column width="60%"}

<br>

```{r}
#| echo: true
#| eval: false
# Output of here::here() on Windows
here::here()
## [1] "C:/Users/janedoe/Documents/project"

# Output of here::here() on MacOS
here::here()
## [1] "/Users/johndoe/Dropbox/work/project"

# Output of here::here() on GNU/Linux
here::here()
## [1] "/home/johnsmith/git-projects/project"
```

<br>
{{< fa hand-point-right >}} &nbsp;Use the package [`here`](https://here.r-lib.org/) to create project-relative paths

```{r}
#| echo: true
#| eval: false
# Build relative path ----
here::here("data", "raw-data", "raw-data-1.csv")
## [1] "/home/johnsmith/git-projects/project/data/raw-data/raw-data-1.csv"

# Build relative path ----
data <- read.csv(here::here("data", "raw-data", "raw-data-1.csv"))
```
:::
::::



## Building robust paths

::::{ .columns }
:::{.column width="40%"}
![<https://allisonhorst.com/other-r-fun>](img/here.png)
:::

:::{.column width="60%"}

<br>

```{r}
#| echo: true
#| eval: false
# Output of here::here() on Windows
here::here()
## [1] "C:/Users/janedoe/Documents/project"

# Output of here::here() on MacOS
here::here()
## [1] "/Users/johndoe/Dropbox/work/project"

# Output of here::here() on GNU/Linux
here::here()
## [1] "/home/johnsmith/git-projects/project"
```

<br>
{{< fa hand-point-right >}} &nbsp;Use the package [`here`](https://here.r-lib.org/) to create project-relative paths

```{r}
#| echo: true
#| eval: false
# Build relative path ----
here::here("data", "raw-data", "raw-data-1.csv")
## [1] "/home/johnsmith/git-projects/project/data/raw-data/raw-data-1.csv"

# Build relative path ----
data <- read.csv(here::here("data", "raw-data", "raw-data-1.csv"))
```
:::
::::


<br>
{{< fa hand-point-right >}} &nbsp;`here` will search for a `.Rproj` file (or a `.here` file) to define the working directory


## The `DESCRIPTION` file

{{< fa hand-point-right >}} &nbsp;Main component of an {{< fa brands r-project >}} package, the `DESCRIPTION` file can be added to a research compendium to describe **project metadata**

<br>

```
Package: projectname
Type: Package
Title: The Title of the Project
Authors@R: c(
    person(given   = "John",
           family  = "Doe",
           role    = c("aut", "cre", "cph"),
           email   = "john.doe@domain.com",
           comment = c(ORCID = "9999-9999-9999-9999")))
Description: A paragraph providing a full description of the project.
License: GPL (>= 2)
```

## The `DESCRIPTION` file

{{< fa hand-point-right >}} &nbsp;Main component of an {{< fa brands r-project >}} package, the `DESCRIPTION` file can be added to a research compendium to describe **project metadata**

<br>

```
Package: projectname
Type: Package
Title: The Title of the Project
Authors@R: c(
    person(given   = "John",
           family  = "Doe",
           role    = c("aut", "cre", "cph"),
           email   = "john.doe@domain.com",
           comment = c(ORCID = "9999-9999-9999-9999")))
Description: A paragraph providing a full description of the project.
License: GPL (>= 2)
Imports:
    devtools,
    here
```

<br>

{{< fa lightbulb >}} &nbsp;It can be used to **list all external packages** required by the project

. . .

<br>

> You should consider the `DESCRIPTION` file as the only file to list your external packages

{{< fa hand-point-right >}} &nbsp;Do not use `library()` or `install.packages()` anymore


## Dealing w/ dependencies

To call a function (`bar()`) from an external package (`foo`), usually you use the function `bar()` after calling `library("foo")`

. . .

But,

- for readability purposes, it's not perfect (where does the function `bar()` come from?)
- you can have a conflict w/ a function also named `bar()` but from the package `baz` also attached with `library()`. You are not sure which function you are really using.


```{r}
#| echo: true
#| eval: false
library("tidyverse")
## â”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 ## â”€â”€
## âœ” dplyr     1.1.2     âœ” readr     2.1.4
## âœ” forcats   1.0.0     âœ” stringr   1.5.0
## âœ” ggplot2   3.4.2     âœ” tibble    3.2.1
## âœ” lubridate 1.9.2     âœ” tidyr     1.3.0
## âœ” purrr     1.0.1     
## â”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() ## â”€â”€
## âœ– dplyr::filter() masks stats::filter()
## âœ– dplyr::lag()    masks stats::lag()
## â„¹ Use the conflicted package to force all conflicts to become errors
```

. . .

<br>

{{< fa hand-point-right >}} &nbsp;A solution to prevent conflict is to call an external function as `foo::bar()`

. . .

- `library()` will load and attach a package
- `::` will just load a package


## Dealing w/ dependencies

{{< fa hand-point-right >}} &nbsp;In the `DESCRIPTION` file, 

- list external packages under the tag `Imports` if you call functions as `foo::bar()` - **recommended**
- list external packages under the tag `Depends` if you want to attach a package (e.g. `ggplot2`)

. . .

<br>

```
Package: projectname
Type: Package
Title: The Title of the Project
Authors@R: c(
    person(given   = "John",
           family  = "Doe",
           role    = c("aut", "cre", "cph"),
           email   = "john.doe@domain.com",
           comment = c(ORCID = "9999-9999-9999-9999")))
Description: A paragraph providing a full description of the project.
License: GPL (>= 2)
Depends:
    ggplot2
Imports:
    devtools,
    here
```

. . .

<br>

With this setting, you will use `ggplot()` but `here::here()` in your code

. . .

<br>

{{< fa lightbulb >}} &nbsp;Have a look at the tag `Remotes` to list packages only available on GitHub, GitLab, etc.



## Dealing w/ dependencies

Editing the `DESCRIPTION` file is not enough to install and access external packages.

<br>

::::{.columns}
:::{.column width="50%"}
{{< fa hand-point-right >}} &nbsp;You have to run these two command lines:

```{r}
#| echo: true
#| eval: false
# Install missing packages ----
devtools::install_deps()

# Load and attach (if Depends is used) packages ----
devtools::load_all()
```
:::
:::{.column width="50%"}
Or

```{r}
#| echo: true
#| eval: false
# Install missing packages ----
remotes::install_deps()

# Load and attach (if Depends is used) packages ----
pkgload::load_all()
```
:::
::::

. . .

<br>

{{< fa lightbulb >}} &nbsp;If you don't want to upgrade your packages, use `remotes::install_deps(upgrade = "never")`


. . .

<br>

**Wrap-up:** w/ a `DESCRIPTION` file and the functions `install_deps()` and `load_all()`, no need to use `library()` or `install.packages()` anymore


## The `README` file

...

## Choose a `LICENSE`

...