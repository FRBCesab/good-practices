# {{< fa code-branch >}} &nbsp;Tracking changes

## Motivations

::::{ .columns }
:::{ .column width="60%" align="left"}
![Project content (without `git`)](img/folder_without_git.png)
:::
:::{ .column width="40%" }
:::
::::

## Motivations

::::{ .columns }
:::{ .column width="60%" align="left"}
![Project content (without `git`)](img/folder_without_git.png)
:::
:::{ .column width="40%" }
**Questions**

- Which version of `analyses.R` is the final one?
- What about `data.csv`?
- What are the differences between versions?
- Who have contributed to these versions? When?
:::
::::


## Motivations

::::{ .columns }
:::{ .column width="60%" align="left"}
![Project content (without `git`)](img/folder_without_git.png)
:::
:::{ .column width="40%" }
**Questions**

- Which version of `analyses.R` is the final one?
- What about `data.csv`?
- What are the differences between versions?
- Who have contributed to these versions? When?

**Comments**

- It becomes difficult to find new versions names
- And this folder: what a mess!
:::
::::


## Motivations

::::{ .columns }
:::{ .column width="60%" align="left"}
![Project content (without `git`)](img/folder_without_git.png)
:::
:::{ .column width="40%" }
**Questions**

- Which version of `analyses.R` is the final one?
- What about `data.csv`?
- What are the differences between versions?
- Who have contributed to these versions? When?

**Comments**

- It becomes difficult to find new versions names
- And this folder: what a mess!
:::
::::

<br>

::::{ .columns }
:::{ .column width="60%" align="left"}
{{< fa hand-point-right >}} &nbsp;We need a tool that deals with versions for us
:::
:::{ .column width="40%" }
:::
::::


## Motivations

::::{ .columns }
:::{ .column width="60%" align="left"}
![Project content (without `git`)](img/folder_without_git.png)
:::
:::{ .column width="40%" }
**Questions**

- Which version of `analyses.R` is the final one?
- What about `data.csv`?
- What are the differences between versions?
- Who have contributed to these versions? When?

**Comments**

- It becomes difficult to find new versions names
- And this folder: what a mess!
:::
::::

<br>

::::{ .columns }
:::{ .column width="60%" align="left"}
{{< fa hand-point-right >}} &nbsp;We need a tool that deals with versions for us
:::
:::{ .column width="40%" }
![](img/git-logo-long.png){width=50%}
:::
::::




## Motivations

::::{ .columns }
:::{ .column width="60%" align="left"}
![Project content (with `git`)](img/folder_with_git.png)
:::
:::{ .column width="40%" }
:::
::::

<br>

::::{ .columns }
:::{ .column width="60%" align="left"}
{{< fa hand-point-right >}} &nbsp;We need a tool that deals with versions for us
:::
:::{ .column width="40%" }
![](img/git-logo-long.png){width=50%}
:::
::::


## Presentation of `git`

- Created by **Linus Torvalds** in 2005 for the development of the Linux kernel
- [Distributed version control system](https://en.wikipedia.org/wiki/Distributed_version_control) (DVCS) - Peer-to-peer approach


<br>

::::{ .columns }
:::{ .column width="60%" align="left"}
:::
:::{ .column width="40%"}
![](img/git-logo-long.png)
:::
::::


## Presentation of `git`

- Created by **Linus Torvalds** in 2005 for the development of the Linux kernel
- [Distributed version control system](https://en.wikipedia.org/wiki/Distributed_version_control) (DVCS) - Peer-to-peer approach


<br>

::::{ .columns }
:::{ .column width="60%" align="left"}
**Advantages of VCS (and `git`)**

- make contributions transparent (what / who / when / why)
- keep the entire history of a file (and project)
- inspect a file throughout its life time
- revert back to a previous version
- handle multiple versions (branches)
- keep your working copy clean
- facilitate collaborations w/ code hosting platforms
<br>(GitHub, GitLab, Bitbucket, etc.)
- backup your project
:::
:::{ .column width="40%"}
![](img/git-logo-long.png)
:::
::::


## A word of warning


**`Git`** and **`GitHub`** are **not the same thing**

- `Git` is a free and open-source **software**
- `GitHub` (and co) is a **web platform** to host and share projects that use `git`


. . . 

<br>

In other words:

> You do not need `GitHub` to use `git` but you cannot use `GitHub` without using `git`


## GUI clients


::::{ .columns }
:::{ .column width="50%"}
![](img/git-cli.png){width=100%}
:::
:::{ .column width="50%" align="left"}
<br>

- `Git` is a command-line interface (CLI)
- You interact with `git` using a terminal
- All commands start w/ the keyword `git`
<br>(`git status / log / add / commit`)
:::
::::


. . .

{{< fa lightbulb >}} &nbsp;But a lot of [third-party tools](https://git-scm.com/downloads/guis) provides a graphical interface to `git`
<br>(e.g. [RStudio](https://posit.co/download/rstudio-desktop/), [GitKraken](https://www.gitkraken.com/), [GitHub Desktop](https://desktop.github.com/), extensions for [VSCode](https://code.visualstudio.com/), [VSCodium](https://vscodium.com/), [neovim](https://neovim.io/), etc.)


<br>

> Just keep in mind that for some operations you will need to use the terminal



## Zoom on RStudio

::::{ .columns }
:::{ .column width="100%"}
**Git main panel**

![](img/git-rstudio.png){width=80%}
:::
:::{ .column width="0%"}
:::
::::


## Zoom on RStudio


::::{ .columns }
:::{ .column width="50%"}
**Stage files, view differences and commit changes**

![](img/rstudio-change.png){width=100%}
:::
:::{ .column width="50%"}
**View history and versions**

![](img/rstudio-history.png){width=100%}
:::
::::



## Installation & Configuration

**Installation**

{{< fa hand-point-right >}} &nbsp;`Git` can be downloaded here: <https://git-scm.com/downloads>

Alternatively you can follow this tutorial: <https://frbcesab.github.io/training-courses/installation.html>

<br>

Restart RStudio and check your installation: 

::::{ .columns }
:::{ .column width="50%"}
```{r}
#| echo: true
Sys.which("git")
```
:::
:::{ .column width="50%"}
:::
::::

. . .

<br>

**Configuration**

To use `git`, you need to store your credentials (username and email) that will be added to all your commits.
<br>
Open a terminal and run:

::::{ .columns }
:::{ .column width="50%"}
```bash
git config --global user.name  "Jane Doe"
git config --global user.email "jane.doe@mail.com"
```
:::
:::{ .column width="50%"}
:::
::::

. . .

<br>

**Initialization**

For each project, `git` must be initialized w/

::::{ .columns }
:::{ .column width="50%"}
```bash
git init
```
:::
:::{ .column width="50%"}
:::
::::


## How does `git` work?

- `git` takes a sequence of **snapshots**
- Each snapshot can contain changes for one or many file(s)
- User chooses which files to _'save'_ in a snapshot and when
<br>(`!=` file hosting services like Dropbox, Google Drive, etc.)


. . .

<br>

{{< fa hand-point-right >}} &nbsp;In the `git` universe, a snapshot is a **version**, i.e. the state of the whole project at a specific point in time


. . .

<br>

A snapshot is a two-step process:

1. **Stage files**: select which files to add to the version
2. **Commit changes**: save the version and add metadata (`commit message`)


## Basic workflow

{{< fa hand-point-right >}} &nbsp;Initialize `git` in a (empty) folder (`repository`)

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-0.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git init
```
<br>
The **three areas** of a `git` `repository`:

- **`working copy`**: current state of the directory (what you actually see)
- **`staging area`**: selected files that will be added to the next version
- **`repository`**: area w/ all the versions (the `.git/` subdirectory)
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;Add new files in the `repository`

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-1.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git status

# On branch main
# 
# No commits yet
# 
# Untracked files:
# 	README.md
# 	analyses.R
# 	data.csv
# 
# Nothing added to commit but untracked files present
# Use "git add <file>..." to track
```
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) one file

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-2.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git add data.csv
```
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) one file

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-2.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git add data.csv
```

<br>
```bash
git status

# On branch main
# 
# No commits yet
# 
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
# 	new file:   data.csv
# 
# Untracked files:
#   (use "git add <file>..." to track)
# 	README.md
# 	analyses.R
```
:::
::::



## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) several files

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-3.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git add data.csv analyses.R
```
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) several files

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-3.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git add data.csv analyses.R
```

<br>
```bash
git status

# On branch main
# 
# No commits yet
# 
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
# 	new file:   analyses.R
# 	new file:   data.csv
# 
# Untracked files:
#   (use "git add <file>..." to track)
# 	README.md
```
:::
::::




## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) all files

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-4.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git add .
```
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) all files

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-4.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git add .
```

<br>
```bash
git status

# On branch main
# 
# No commits yet
# 
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
# 	new file:   analyses.R
# 	new file:   data.csv
# 	new file:   README.md
```
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Commit` changes to create a new version

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-5.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git commit -m "a good commit message"
```
:::
::::



## Basic workflow

{{< fa hand-point-right >}} &nbsp;Now we are `up-to-date`

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-6.png){width=100%}
:::
:::{ .column width="40%"}
:::
::::

## Basic workflow

{{< fa hand-point-right >}} &nbsp;Now we are `up-to-date`

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-6.png){width=100%}
:::
:::{ .column width="40%"}
<br>
```bash
git status

# On branch main
# nothing to commit, working tree clean
```
:::
::::



## The status of a file

<br>

![](img/git-file-lifecycle.png){width=50% fig-align="center"}

<br>

With `git` a file can be **untracked** or **tracked**[^changes]. If it's tracked it can be:

- unmodified
- modified and unstaged
- modified and staged


[^changes]: <https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository>



## The `.gitignore`

{{< fa hand-point-right >}} &nbsp;We can also tell `git` to **ignore specific files**: it's the purpose of the `.gitignore` file

<br>

Which files? For instance:

- passwords, tokens and other secrets
- temporary files
- build files
- large files

. . .


The syntax is flexible:

::::{ .columns }
:::{ .column width="50%"}
```txt
# Ignore a specific file
README.html

# Ignore all PDF
*.pdf

# Ignore a folder
data/

# Ignore a subfolder
data/raw-data/

# Ignore a specific file in a subfolder
data/raw-data/raw-data.csv
```
:::
:::{ .column width="50%"}
:::
::::

. . .

<br>

{{< fa hand-point-right >}} &nbsp;Template for {{< fa brands r-project >}} projects available [here](https://github.com/github/gitignore/blob/main/R.gitignore)

## Commits



::::{.columns}
:::{.column width=50%}
When committing a new version (w/ `git commit`), the following information must be added:

- **`WHO`** - the person who has made the changes
<br>(automatically added by `git`)
- **`WHEN`** - the date of the commit
<br>(automatically added by `git`)
- **`WHAT`** - the files that have been modified
<br>(selected by the user w/ `git add`)
- **`WHY`** - the reason of the commit, i.e. what has been done compared to the previous version
<br>(added by the user w/ `git commit`)
:::
:::{.column width=50%}
:::
::::



## Commits

::::{.columns}
:::{.column width=50%}
When committing a new version (w/ `git commit`), the following information must be added:

- **`WHO`** - the person who has made the changes
<br>(automatically added by `git`)
- **`WHEN`** - the date of the commit
<br>(automatically added by `git`)
- **`WHAT`** - the files that have been modified
<br>(selected by the user w/ `git add`)
- **`WHY`** - the reason of the commit, i.e. what has been done compared to the previous version
<br>(added by the user w/ `git commit`)
:::
:::{.column width=50%}
Print the `git` **history** w/ `git log`

```bash
git log --stat

# (*) commit dc4366af56223f533a32ef38794b4e567b0b7422
# Author: ahasverus <ahasverus@users.noreply.github.com>
# Date:   Wed Jun 28 14:11:20 2023 +0200
# 
#     doc: update CITATION.cff
# 
#  CITATION.cff | 6 +++---
#  1 file changed, 3 insertions(+), 3 deletions(-)
# 
# (*) commit 75c0072892544f779105067efc17d361365554e1 
# Author: Nicolas Casajus <nicolas.casajus@fondationbiodiversite.fr>
# Date:   Wed Jun 28 14:00:15 2023 +0200
# 
#     doc: update references
# 
#  README.Rmd | 6 +++---
#  README.md  | 6 +++---
#  2 files changed, 6 insertions(+), 6 deletions(-)
# 
# (*) commit 6a00f3539636726c3715a7e94eea04bd30ef8f69
# Author: Nicolas Casajus <nicolas.casajus@fondationbiodiversite.fr>
# Date:   Wed Jun 28 12:39:48 2023 +0000
# 
#     style: align R code lines
# 
#  joss-paper/paper.bib | 2 +-
#  joss-paper/paper.md  | 8 ++++----
#  2 files changed, 5 insertions(+), 5 deletions(-)
#
# (*) commit 6f7d632c7d1dad3acddfb128a2c4a07f1e8a4e9c
# ...
```
:::
::::


## Commit message

<https://initialcommit.com/blog/git-commit-messages-best-practices>

<https://reflectoring.io/meaningful-commit-messages/>

<https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/>

<https://dev.to/wordssaysalot/art-of-writing-a-good-commit-message-56o7>



## Branches

...


## How to...

...



## Notes

https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository
